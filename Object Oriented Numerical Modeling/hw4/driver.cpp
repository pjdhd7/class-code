
#include "driver.h"



int main (int argc, char *argv[])
{
    Newton_Poly<double> uniform_poly;
    Newton_Poly<double> cheby_poly;

    //Nodes generated by Chebyshev Polynomials
    ArrayList<double> the_nodes;
    //Functor that generate the nodes for Chebyshev Polynomials
    Cheby_nodes<double> node_generator;
    //Functor that calculates the function at a given point
    function_calc<double> the_func;

    int numberOfPairs;
    std::ifstream polyInput;

    if(argc > 1)
    {
        int numberOfNodes = atoi(argv[1]);
        if(numberOfNodes > 0)
        {
            the_nodes = node_generator(numberOfNodes);
        }
        else
        {
            cerr << "Aborting Driver: Command Line Argument for Chebyshev "
                 << "Polynomials could not be converted properly: " << argv[1]
                 << std::endl;
            exit(1);
        }

    }
    else
    {
        the_nodes = node_generator(10);
    }

    //Sets the input to be either a passed filename, or the default
    if(argc > 2)
    {
        polyInput.open(argv[2]);

        if(polyInput.is_open() == true)
        {
            //Gets the number of pairs in the input file
            polyInput >> numberOfPairs;
            polyInput.ignore();
        }
        else
        {
            std::cout << "Aborting Driver: File failed to open. Make sure "
                      << argv[2] << " exists in the directory." << std::endl;
            exit(1);
        }
    }
    else
    {
        //Use the first line for CLion development, the second for submission
        //polyInput.open("../repo/default_data.txt");
        polyInput.open("default_data.txt");

        if(polyInput.is_open() == true && polyInput.eof() == false)
        {
            //Gets the number of pairs in the input file
            polyInput >> numberOfPairs;
            polyInput.ignore();
        }
        else
        {
            std::cerr << "Aborting Driver: File failed to open. Make sure "
                      << "default_data.txt exists in the directory."
                      << std::endl;
            exit(1);
        }
    }

    //Iterates over the file to grab the data
    for(int i = 0; i < numberOfPairs; i++)
    {
        try
        {
            polyInput >> uniform_poly;
        }
        catch(inputErr e)
        {
            std::cerr << "Input Error: " << e.errString() << std::endl;
        }
        catch(streamErr e)
        {
            std::cerr << "Stream Error: " << e.errString() << std::endl;
            std::cerr << "Aborting Driver" << std::endl;
            exit(1);
        }
        catch(numErr e)
        {
            std::cerr << "Numerical Error: " << e.errString() << std::endl;
            std::cerr << "Aborting Driver" << std::endl;
            exit(1);
        }
    }

    numberOfPairs = the_nodes.size();

    for(int i = 0; i < numberOfPairs; i++)
    {
        cheby_poly.add_data(the_nodes[i], the_func(the_nodes[i]));
    }

    compare_error(uniform_poly, cheby_poly, the_func);

    polyInput.close();

    return 0;
}
